<application>
  <component name="AppStorage">
    <histories>
      <item value="Exception" />
      <item value="Records a new breadcrumb which will be attached to future events. * * Breadcrumbs will be added to subsequent events to provide more context on * user's actions prior to an error or crash. * * @param breadcrumb The breadcrumb to record." />
      <item value="相对" />
      <item value="* * Declare as one of the following: * * - `element-name`: Select by element name. * - `.class`: Select by class name. * - `[attribute]`: Select by attribute name. * - `[attribute=value]`: Select by attribute name and value. * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`. * - `selector1, selector2`: Select if either `selector1` or `selector2` matches. * * Angular only allows directives to apply on CSS selectors that do not cross * element boundaries. * * For the following template HTML, a directive with an `input[type=text]` selector, * would be instantiated only on the `&lt;input type=&quot;text&quot;&gt;` element. * * ```html * &lt;form&gt; * &lt;input type=&quot;text&quot;&gt; * &lt;input type=&quot;radio&quot;&gt; * &lt;form&gt; * ```" />
      <item value="The CSS selector that identifies this directive in a template * and triggers instantiation of the directive." />
      <item value="/** * The CSS selector that identifies this directive in a template * and triggers instantiation of the directive. * * Declare as one of the following: * * - `element-name`: Select by element name. * - `.class`: Select by class name. * - `[attribute]`: Select by attribute name. * - `[attribute=value]`: Select by attribute name and value. * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`. * - `selector1, selector2`: Select if either `selector1` or `selector2` matches. * * Angular only allows directives to apply on CSS selectors that do not cross * element boundaries. * * For the following template HTML, a directive with an `input[type=text]` selector, * would be instantiated only on the `&lt;input type=&quot;text&quot;&gt;` element. * * ```html * &lt;form&gt; * &lt;input type=&quot;text&quot;&gt; * &lt;input type=&quot;radio&quot;&gt; * &lt;form&gt; * ``` * */" />
      <item value="/** * Parameter decorator on a view-provider parameter of a class constructor * that tells the DI framework to resolve the view by checking injectors of child * elements, and stop when reaching the host element of the current component. * * For an extended example, see * [&quot;Dependency Injection Guide&quot;](guide/dependency-injection-in-action#optional). * * @usageNotes * * The following shows use with the `@Optional` decorator, and allows for a null result. * * &lt;code-example path=&quot;core/di/ts/metadata_spec.ts&quot; region=&quot;Host&quot;&gt; * &lt;/code-example&gt;" />
      <item value="Decorator that declares a DOM event to listen for, * and provides a handler method to run when that event occurs." />
      <item value="Hallo!" />
      <item value="Hello!" />
      <item value="你好" />
      <item value="你好卧槽" />
      <item value="angular" />
      <item value="e 2 e" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="8" />
        <entry key="ENGLISH" value="9" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>